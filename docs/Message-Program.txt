-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/Message-Program#readme</a>
@package Message-Program
@version 0.1.0.0

module Users

-- | User data type
data User
User :: Int -> String -> User
[user_id] :: User -> Int
[username] :: User -> String

-- | Function used to test imports of user class
test_user_class :: IO ()
instance GHC.Classes.Eq Users.User
instance GHC.Generics.Generic Users.User
instance GHC.Show.Show Users.User

module Messages

-- | Message datatype
data Message
Message :: UUID -> String -> Int -> User -> User -> Message
[message_id] :: Message -> UUID
[message_content] :: Message -> String
[time_created] :: Message -> Int
[user_sent_to] :: Message -> User
[user_sent_from] :: Message -> User

-- | Function used to test imports of message class
test_message_class :: IO ()
instance GHC.Generics.Generic Messages.Message
instance GHC.Show.Show Messages.Message

module Processes

-- | User thread process Takes boolean of debug mode Takes Channel of
--   Message Type Takes singular user responsible for Outputs Nothing
user_thread :: Bool -> Chan Message -> User -> IO ()

-- | Message Thread - Runs 10 times per user defined Takes channel to
--   denote when all user messages are completed takes channel to store
--   message created takes user to show who sent the message takes a list
--   of remaining users who can be sent the randomised message
message_thread :: Bool -> Chan Message -> User -> [User] -> IO ()

-- | Function used to print out all messages in clean format
print_messages :: Message -> IO ()

-- | Function to print out how many messages were sent to select user Takes
--   list of messages Takes User to see how many messages were received by
--   prints number of messages recieved
count_messages_for_user :: [Message] -> User -> IO ()

-- | Full list of users in the system. Returns a pre-populated list of
--   users In a real life situation, this data would be populated through a
--   database
full_user_list :: [User]

-- | Function used to create a new user in simple format
create_user :: Int -> String -> User

-- | Function used to create a new message in simple format
create_message :: UUID -> String -> Int -> User -> User -> Message

-- | Calculates a random number between 0 and an inputted number
random_val_in_range :: Int -> IO Int

-- | Generates a random string of characters of given length
random_message :: Int -> IO String

-- | UUID Generator modified from
--   <a>https://stackoverflow.com/questions/58906666/haskell-uuid-generation</a>
gen_uuid :: Int -> UUID
